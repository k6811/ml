"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# Load the Iris dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
column_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
iris_data = pd.read_csv(url, header=None, names=column_names)
# Display the first few rows of the dataset
print(iris_data.head())
Output:-
Step 2: Handle Missing Values and Inconsistent Formatting
# Check for missing values
print(iris_data.isnull().sum())
# If there were missing values, we could handle them like this:
# iris_data.fillna(iris_data.mean(), inplace=True) # For numerical columns
# iris_data['species'].fillna(iris_data['species'].mode()[0], inplace=True) # For categorical


Step 2: Handle Missing Values and Inconsistent Formatting
# Check for missing values
print(iris_data.isnull().sum())
# If there were missing values, we could handle them like this:
# iris_data.fillna(iris_data.mean(), inplace=True) # For numerical columns
# iris_data['species'].fillna(iris_data['species'].mode()[0], inplace=True) # For categorical
columns
Output:

Step 3: Calculate Descriptive Summary Statistics
# Descriptive statistics
print(iris_data.describe())
Output:-
Step 4: Create Visualizations
# Univariate analysis: Histograms
iris_data.hist(bins=10, figsize=(10, 8))
plt.suptitle('Histograms of Iris Dataset Features')
plt.show()

Univariate Analysis
# Bivariate analysis: Pairplot
sns.pairplot(iris_data, hue='species')
plt.title('Pairplot of Iris Dataset')
plt.show()
# Boxplot for each feature by species
plt.figure(figsize=(12, 6))
for i, feature in enumerate(column_names[:-1]):
 plt.subplot(2, 2, i + 1)
 sns.boxplot(x='species', y=feature, data=iris_data)
 plt.title(f'Boxplot of {feature} by Species')
plt.tight_layout()
plt.show()

Step 5: Identify Potential Featur
Features: sepal_length, sepal_width, petal_length, petal_width
‚óè Target Variable: species
Step 6: Pre-processing Routines
Now, we will apply label encoding, scaling, and binarization.
from sklearn.preprocessing import LabelEncoder, StandardScaler, Binarizer
# Label Encoding
label_encoder = LabelEncoder()
iris_data['species'] = label_encoder.fit_transform(iris_data['species'])
# Scaling
scaler = StandardScaler()
scaled_features = scaler.fit_transform(iris_data.iloc[:, :-1]) # Exclude target variable
scaled_iris_data = pd.DataFrame(scaled_features, columns=column_names[:-1])
scaled_iris_data['species'] = iris_data['species']
# Binarization
binarizer = Binarizer(threshold=0.5)
binarized_features = binarizer.fit_transform(scaled_iris_data.iloc[:, :-1])
binarized_iris_data = pd.DataFrame(binarized_features, columns=column_names[:-1])
binarized_iris_data['species'] = scaled_iris_data['species']
# Display the processed datasets
print("Scaled Iris Data:")
print(scaled_iris_data.head())
print("\nBinarized Iris Data:")
print(binarized_iris_data.head())
Output